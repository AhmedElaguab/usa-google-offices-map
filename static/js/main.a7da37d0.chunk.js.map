{"version":3,"sources":["MapController.js","App.js","serviceWorker.js","index.js"],"names":["MapController","state","_this2","this","react_default","a","createElement","className","onChange","e","props","onStateFilter","target","value","htmlFor","name","id","offices","map","office","key","onClick","onMarkerToggleOpen","onKeyUp","onSpaceKeyPress","tabIndex","title","Component","MapWithAMakredInfoWindow","compose","withScriptjs","withGoogleMap","lib","defaultZoom","defaultCenter","position","location","animation","isOpen","onCloseClick","city","App","lat","lng","isMarkerShown","city_state","hundleMarkerToggleOpen","toggledOffice","indexOf","setTimeout","setState","fetch","then","resp","json","data","length","document","querySelector","innerHTML","concat","event","_this","which","hundleStateFilter","_this3","shownOffices","filter","src_MapController","googleMapURL","loadingElement","style","height","containerElement","mapElement","isLocalhost","Boolean","window","hostname","match","registerValidSW","swUrl","config","navigator","serviceWorker","register","registration","onupdatefound","installingWorker","installing","onstatechange","controller","console","log","onUpdate","onSuccess","catch","error","ReactDOM","render","src_App_0","getElementById","URL","process","href","origin","addEventListener","response","contentType","headers","get","status","ready","unregister","reload","checkValidServiceWorker"],"mappings":"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","file":"static/js/main.a7da37d0.chunk.js","sourcesContent":["import React, {Component} from 'react';\r\n\r\nclass MapController extends Component {\r\n  state = {};\r\n  render() {\r\n    return (\r\n      <div className=\"map-controller\">\r\n        <header>\r\n          <h2>Google Offices in USA</h2>\r\n          <form onChange={e => this.props.onStateFilter(e.target.value)}>\r\n            <label htmlFor=\"select-state\">Choose state: </label>\r\n            <select name=\"State\" id=\"select-state\">\r\n              <option value=\"All\">All</option>\r\n              <option value=\"Washington\">Washington</option>\r\n              <option value=\"Oregon\">Oregon</option>\r\n              <option value=\"California\">California</option>\r\n            </select>\r\n          </form>\r\n        </header>\r\n        <main>\r\n          <ul>\r\n            {this.props.offices.map(office => (\r\n              <li\r\n                key={office.id}\r\n                onClick={() => this.props.onMarkerToggleOpen(office)}\r\n                onKeyUp={e => this.props.onSpaceKeyPress(e, office, this)}\r\n                tabIndex=\"0\"\r\n              >\r\n                {office.title}\r\n              </li>\r\n            ))}\r\n          </ul>\r\n        </main>\r\n      </div>\r\n    );\r\n  }\r\n}\r\n\r\nexport default MapController;\r\n","import React, {Component} from 'react';\r\nimport './App.css';\r\nimport MapController from './MapController';\r\nimport {compose} from 'recompose';\r\nimport {\r\n  withScriptjs,\r\n  withGoogleMap,\r\n  GoogleMap,\r\n  Marker,\r\n  InfoWindow\r\n} from 'react-google-maps';\r\n\r\nconst MapWithAMakredInfoWindow = compose(\r\n  withScriptjs,\r\n  withGoogleMap\r\n)(props => (\r\n  <GoogleMap defaultZoom={4} defaultCenter={props.defaultCenter}>\r\n    {props.offices.map(office => (\r\n      <Marker\r\n        key={office.id}\r\n        position={office.location}\r\n        onClick={() => props.onMarkerToggleOpen(office)}\r\n        animation={office.animation}\r\n      >\r\n        {office.isOpen && (\r\n          <InfoWindow onCloseClick={() => props.onMarkerToggleOpen(office)}>\r\n            <div className={'infowindow-' + office.city}>\r\n              <h3 tabIndex=\"0\">{office.title}</h3>\r\n              <h4 tabIndex=\"0\">About City of Location:</h4>\r\n            </div>\r\n          </InfoWindow>\r\n        )}\r\n      </Marker>\r\n    ))}\r\n  </GoogleMap>\r\n));\r\n\r\nclass App extends Component {\r\n  state = {\r\n    defaultCenter: {lat: 40.9578777, lng: -118.8299901},\r\n    isMarkerShown: true,\r\n    state: 'All',\r\n    offices: [\r\n      {\r\n        title: 'Google Kirkland',\r\n        location: {lat: 47.670189, lng: -122.197425},\r\n        animation: null,\r\n        state: 'Washington',\r\n        city: 'Kirkland',\r\n        city_state: 'Kirkland, Washington',\r\n        isOpen: false,\r\n        id: 0\r\n      },\r\n      {\r\n        title: 'Google Portland',\r\n        location: {lat: 45.521622, lng: -122.677596},\r\n        animation: null,\r\n        state: 'Oregon',\r\n        city: 'Portland',\r\n        city_state: 'Portland, Oregon',\r\n        isOpen: false,\r\n        id: 1\r\n      },\r\n      {\r\n        title: 'Google Building GWC1',\r\n        location: {lat: 37.424135, lng: -122.09164},\r\n        animation: null,\r\n        state: 'California',\r\n        city: 'Mountain_View',\r\n        city_state: 'Mountain View, California',\r\n        isOpen: false,\r\n        id: 2\r\n      },\r\n      {\r\n        title: 'Google Inc',\r\n        location: {lat: 33.99564, lng: -118.477623},\r\n        animation: null,\r\n        state: 'California',\r\n        city: 'Los_Angeles',\r\n        city_state: 'Los Angeles',\r\n        isOpen: false,\r\n        id: 3\r\n      },\r\n      {\r\n        title: 'Google San Diego',\r\n        location: {lat: 32.90959, lng: -117.181879},\r\n        animation: null,\r\n        state: 'California',\r\n        city: 'San_Diego',\r\n        city_state: 'San Diego',\r\n        isOpen: false,\r\n        id: 4\r\n      }\r\n    ]\r\n  };\r\n\r\n  // Hundle marker toggle open.\r\n  hundleMarkerToggleOpen = office => {\r\n    const offices = this.state.offices;\r\n    const toggledOffice = office;\r\n\r\n    // Open the InfoWindow if it is not open.\r\n    if (!office.isOpen) {\r\n      toggledOffice.animation = 1;\r\n      toggledOffice.isOpen = true;\r\n      offices[offices.indexOf(office)] = toggledOffice;\r\n\r\n      // Stop animation after 2 seconds.\r\n      setTimeout(() => {\r\n        toggledOffice.animation = null;\r\n        offices[offices.indexOf(office)] = toggledOffice;\r\n        this.setState({offices});\r\n      }, 2100);\r\n\r\n      fetch(\r\n        'https://en.wikipedia.org/w/api.php?&origin=*&action=opensearch&search=' +\r\n          office.city_state +\r\n          '&limit=1'\r\n      )\r\n        .then(resp => {\r\n          return resp.json();\r\n        })\r\n        .then(data => {\r\n          if (data[2].length) {\r\n            setTimeout(() => {\r\n              document.querySelector(\r\n                '.infowindow-' + office.city\r\n              ).innerHTML += `<p tabindex=\"0\">${\r\n                data[2]\r\n              }<br><span><strong>Source:</strong> <a href=\"${\r\n                data[3]\r\n              }\" target=\"_blank\" aria-label=\"Read more from Wikipedia\">Wikipedia</a></span></p>`;\r\n            }, 50);\r\n          } else {\r\n            setTimeout(() => {\r\n              document.querySelector('.infowindow-' + office.city).innerHTML +=\r\n                '<p tabindex=\"0\"> No information </p>';\r\n            }, 50);\r\n          }\r\n        });\r\n\r\n      // If it is open then close it.\r\n    } else {\r\n      toggledOffice.animation = null;\r\n      toggledOffice.isOpen = false;\r\n      offices[offices.indexOf(office)] = toggledOffice;\r\n    }\r\n\r\n    this.setState({offices});\r\n  };\r\n\r\n  // On space key pressed. for Accessibility.\r\n  onSpaceKeyPress = (event, office, _this) => {\r\n    // if the pressed key is Space\r\n    if (event.which === 32) {\r\n      // Then open the related InfoWindow.\r\n      _this.props.onMarkerToggleOpen(office);\r\n    }\r\n  };\r\n\r\n  // Hundle state filter.\r\n  hundleStateFilter = state => {\r\n    this.setState({state});\r\n  };\r\n\r\n  render() {\r\n    let shownOffices = this.state.offices;\r\n    // Check if the markers have filtered.\r\n    if (this.state.state !== 'All') {\r\n      shownOffices = this.state.offices.filter(\r\n        office => office.state === this.state.state\r\n      );\r\n    }\r\n    return (\r\n      <div className=\"App\">\r\n        <MapController\r\n          onStateFilter={this.hundleStateFilter}\r\n          offices={shownOffices}\r\n          onMarkerToggleOpen={this.hundleMarkerToggleOpen}\r\n          onSpaceKeyPress={this.onSpaceKeyPress}\r\n        />\r\n        <div className=\"map\">\r\n          <MapWithAMakredInfoWindow\r\n            googleMapURL=\"https://maps.googleapis.com/maps/api/js?key=&v=3.exp&libraries=geometry,drawing,places\"\r\n            loadingElement={<div style={{height: `100%`}} />}\r\n            containerElement={<div style={{height: `100%`}} />}\r\n            mapElement={<div style={{height: `100%`}} />}\r\n            defaultCenter={this.state.defaultCenter}\r\n            offices={shownOffices}\r\n            onMarkerToggleOpen={this.hundleMarkerToggleOpen}\r\n          />\r\n        </div>\r\n      </div>\r\n    );\r\n  }\r\n}\r\n\r\nexport default App;\r\n","// This optional code is used to register a service worker.\r\n// register() is not called by default.\r\n\r\n// This lets the app load faster on subsequent visits in production, and gives\r\n// it offline capabilities. However, it also means that developers (and users)\r\n// will only see deployed updates on subsequent visits to a page, after all the\r\n// existing tabs open on the page have been closed, since previously cached\r\n// resources are updated in the background.\r\n\r\n// To learn more about the benefits of this model and instructions on how to\r\n// opt-in, read http://bit.ly/CRA-PWA\r\n\r\nconst isLocalhost = Boolean(\r\n  window.location.hostname === 'localhost' ||\r\n    // [::1] is the IPv6 localhost address.\r\n    window.location.hostname === '[::1]' ||\r\n    // 127.0.0.1/8 is considered localhost for IPv4.\r\n    window.location.hostname.match(\r\n      /^127(?:\\.(?:25[0-5]|2[0-4][0-9]|[01]?[0-9][0-9]?)){3}$/\r\n    )\r\n);\r\n\r\nexport function register(config) {\r\n  if (process.env.NODE_ENV === 'production' && 'serviceWorker' in navigator) {\r\n    // The URL constructor is available in all browsers that support SW.\r\n    const publicUrl = new URL(process.env.PUBLIC_URL, window.location.href);\r\n    if (publicUrl.origin !== window.location.origin) {\r\n      // Our service worker won't work if PUBLIC_URL is on a different origin\r\n      // from what our page is served on. This might happen if a CDN is used to\r\n      // serve assets; see https://github.com/facebook/create-react-app/issues/2374\r\n      return;\r\n    }\r\n\r\n    window.addEventListener('load', () => {\r\n      const swUrl = `${process.env.PUBLIC_URL}/service-worker.js`;\r\n\r\n      if (isLocalhost) {\r\n        // This is running on localhost. Let's check if a service worker still exists or not.\r\n        checkValidServiceWorker(swUrl, config);\r\n\r\n        // Add some additional logging to localhost, pointing developers to the\r\n        // service worker/PWA documentation.\r\n        navigator.serviceWorker.ready.then(() => {\r\n          console.log(\r\n            'This web app is being served cache-first by a service ' +\r\n              'worker. To learn more, visit http://bit.ly/CRA-PWA'\r\n          );\r\n        });\r\n      } else {\r\n        // Is not localhost. Just register service worker\r\n        registerValidSW(swUrl, config);\r\n      }\r\n    });\r\n  }\r\n}\r\n\r\nfunction registerValidSW(swUrl, config) {\r\n  navigator.serviceWorker\r\n    .register(swUrl)\r\n    .then(registration => {\r\n      registration.onupdatefound = () => {\r\n        const installingWorker = registration.installing;\r\n        if (installingWorker == null) {\r\n          return;\r\n        }\r\n        installingWorker.onstatechange = () => {\r\n          if (installingWorker.state === 'installed') {\r\n            if (navigator.serviceWorker.controller) {\r\n              // At this point, the updated precached content has been fetched,\r\n              // but the previous service worker will still serve the older\r\n              // content until all client tabs are closed.\r\n              console.log(\r\n                'New content is available and will be used when all ' +\r\n                  'tabs for this page are closed. See http://bit.ly/CRA-PWA.'\r\n              );\r\n\r\n              // Execute callback\r\n              if (config && config.onUpdate) {\r\n                config.onUpdate(registration);\r\n              }\r\n            } else {\r\n              // At this point, everything has been precached.\r\n              // It's the perfect time to display a\r\n              // \"Content is cached for offline use.\" message.\r\n              console.log('Content is cached for offline use.');\r\n\r\n              // Execute callback\r\n              if (config && config.onSuccess) {\r\n                config.onSuccess(registration);\r\n              }\r\n            }\r\n          }\r\n        };\r\n      };\r\n    })\r\n    .catch(error => {\r\n      console.error('Error during service worker registration:', error);\r\n    });\r\n}\r\n\r\nfunction checkValidServiceWorker(swUrl, config) {\r\n  // Check if the service worker can be found. If it can't reload the page.\r\n  fetch(swUrl)\r\n    .then(response => {\r\n      // Ensure service worker exists, and that we really are getting a JS file.\r\n      const contentType = response.headers.get('content-type');\r\n      if (\r\n        response.status === 404 ||\r\n        (contentType != null && contentType.indexOf('javascript') === -1)\r\n      ) {\r\n        // No service worker found. Probably a different app. Reload the page.\r\n        navigator.serviceWorker.ready.then(registration => {\r\n          registration.unregister().then(() => {\r\n            window.location.reload();\r\n          });\r\n        });\r\n      } else {\r\n        // Service worker found. Proceed as normal.\r\n        registerValidSW(swUrl, config);\r\n      }\r\n    })\r\n    .catch(() => {\r\n      console.log(\r\n        'No internet connection found. App is running in offline mode.'\r\n      );\r\n    });\r\n}\r\n\r\nexport function unregister() {\r\n  if ('serviceWorker' in navigator) {\r\n    navigator.serviceWorker.ready.then(registration => {\r\n      registration.unregister();\r\n    });\r\n  }\r\n}\r\n","import React from 'react';\r\nimport ReactDOM from 'react-dom';\r\nimport './index.css';\r\nimport App from './App';\r\nimport * as serviceWorker from './serviceWorker';\r\n\r\nReactDOM.render(<App />, document.getElementById('root'));\r\n\r\n// If you want your app to work offline and load faster, you can change\r\n// unregister() to register() below. Note this comes with some pitfalls.\r\n// Learn more about service workers: http://bit.ly/CRA-PWA\r\nserviceWorker.register();\r\n"],"sourceRoot":""}